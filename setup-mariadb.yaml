tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/5.1.0/types.yaml
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-terraform-plugin?version= >=0.15.0
  - plugin:cloudify-aws-plugin
  - plugin:cloudify-utilities-plugin
  - CLUSTER_A--application-mariadb.yaml
  - CLUSTER_B--application-mariadb.yaml

inputs:

  lb_name:
    type: string
    default: CloudifyLB

  domain_name:
    type: string
    description: Domain for AWS Route53
    required: true
    default: app.cloudifydemo.link

  aws_region:
    type: string
    description: AWS region to launch servers
    required: true
    default: eu-west-2

  hosted_zone_id:
    type: string
    required: true
    default: Z095567936AFFYEKNEKDY

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key }
    aws_secret_access_key: { get_secret: aws_secret_key }
    region_name: { get_input: aws_region }

node_templates:

  terraform_module:
    type: cloudify.nodes.terraform.Module
    properties:
      resource_config:
        variables:
          aws_region: eu-central-1
          access_key: { get_secret: aws_access_key }
          secret_key: { get_secret: aws_secret_key }
          lb_name: { get_input: lb_name }
          domain_name: { get_input: domain_name }
          vpc_id: { get_attribute: [CLUSTER_A--DB--openshift_cluster, network_config, vpc, id] }
          public_subnet_id: { get_attribute: [CLUSTER_A--DB--openshift_cluster, network_config, public_subnet] }
          cluster_a:
            - ip: "10.0.200.0"
              http_port: "31763"
              https_port: "30490"
              availability_zone: eu-central-1a
            - ip: "10.0.136.223"
              http_port: "31763"
              https_port: "30490"
              availability_zone: eu-central-1a
          cluster_b:
            - ip: "10.100.189.183"
              http_port: "31516"
              https_port: "31010"
              availability_zone: all
            - ip: "10.100.236.78"
              http_port: "31516"
              https_port: "31010"
              availability_zone: all
        source:
          location: https://github.com/Cloudify-PS/morgan-stanley-poc-tf/archive/refs/heads/lb.zip
          username: { get_secret: github_username }
          password: { get_secret: github_password }
    relationships:
      - target: dns_record_remove
        type: cloudify.relationships.depends_on
      - target: CLUSTER_A--DB--openshift_cluster
        type: cloudify.relationships.depends_on
      - target: CLUSTER_B--DB--openshift_cluster
        type: cloudify.relationships.depends_on
      - target: CLUSTER_A--DB--terraform
        type: cloudify.terraform.relationships.run_on_host

  certificate-secret-A:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/certificate.yaml
        template_variables:
          NAMESPACE: { get_secret: openshift_namespace }
          CERT: { get_attribute: [ cert_generation, cert_base64 ] }
          KEY: { get_attribute: [ cert_generation, key_base64 ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: terraform_module
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: CLUSTER_A--master

  certificate-secret-B:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/certificate.yaml
        template_variables:
          NAMESPACE: { get_secret: openshift_namespace }
          CERT: { get_attribute: [ cert_generation, cert_base64 ] }
          KEY: { get_attribute: [ cert_generation, key_base64 ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: terraform_module
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: CLUSTER_B--master

  cert_host:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *client_config
      agent_config:
        install_method: remote
        user: ec2-user
        key: { get_attribute: [agent_key, private_key_export] }
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ centos_core_ami, aws_resource_id ] }
        InstanceType: t2.micro
        kwargs:
          BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              DeleteOnTermination: True
          Placement:
            AvailabilityZone: eu-west-2c  # Cloudify manager's AZ
          UserData: { get_attribute: [ cloud_init, cloud_config ] }
      use_public_ip: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic
      - type: cloudify.relationships.depends_on
        target: ip
      - type: cloudify.relationships.depends_on
        target: centos_core_ami
      - type: cloudify.relationships.depends_on
        target: cloud_init
      - type: cloudify.relationships.depends_on
        target: dns_record_set

  cert_generation:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/certificate.sh
          inputs:
           domain: { get_input: domain_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: cert_host

  dns_hosted_zone:
    type: cloudify.nodes.aws.route53.HostedZone
    properties:
      resource_id: { get_input: hosted_zone_id }
      client_config: *client_config
      use_external_resource: true
    relationships:
      - type: cloudify.relationships.aws.route53.hosted_zone.connected_to
        target: vpc

  dns_record_set:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Action: UPSERT
          ResourceRecordSet:
            Name: { get_input: domain_name }
            Type: 'A'
            TTL: !!int 60
            ResourceRecords:
            - Value: { get_attribute: [ip, aws_resource_id] }
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: aws.cloudify_aws.route53.resources.record_set.prepare
          inputs:
            # TODO: check if necessary
            resource_config:
              Action: UPSERT
              ResourceRecordSet:
                Name: { get_input: domain_name }
                Type: 'A'
                TTL: !!int 60
                ResourceRecords:
                - Value: { get_attribute: [ip, aws_resource_id] }
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: ip

  dns_record_remove:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Action: DELETE
          ResourceRecordSet:
            Name: { get_input: domain_name }
            Type: 'A'
            TTL: !!int 60
            ResourceRecords:
            - Value: { get_attribute: [ip, aws_resource_id] }
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: aws.cloudify_aws.route53.resources.record_set.delete
          inputs:
            resource_config:
              Action: DELETE
              ResourceRecordSet:
                Name: { get_input: domain_name }
                Type: 'A'
                TTL: !!int 60
                ResourceRecords:
                - Value: { get_attribute: [ip, aws_resource_id] }
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: cert_generation

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: ec2-user
            primary-group: wheel
            shell: /bin/bash
            sudo:
              - 'ALL=(ALL) NOPASSWD:ALL'
            ssh-authorized-keys:
              - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: cert_key
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic

  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          SubnetId: { get_attribute: [ subnet, aws_resource_id] }
          Groups:
            - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnet
      - type: cloudify.relationships.depends_on
        target: security_group
      - type: cloudify.relationships.depends_on
        target: security_group_rules

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 53333
            ToPort: 53333
            IpRanges:
              - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *client_config
      resource_config:
        Description: Security group for certificate generation VM
        GroupName: cloudify-security-group
        VpcId: { get_attribute: [ vpc, aws_resource_id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: subnet-2ec53547
      resource_config:
        CidrBlock: 'N/A'
        AvailabilityZone: 'N/A'

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: vpc-6216f60b
      resource_config:
        CidrBlock: 'N/A'

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: igw-0946a760
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  centos_core_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Filters:
          - Name: owner-id
            Values:
            - "057448758665"
          - Name: name
            Values:
            - "CentOS 7.7.1908 x86_64 with cloud-init (HVM)"

capabilities:

  app_url:
    value: { get_input: domain_name }

  ssl_certificate:
    description: SSL certificate in base64 format
    value: { get_attribute: [cert_generation, cert_base64] }

  ssl_key:
    description: SSL key in base64 format
    value: { get_attribute: [cert_generation, key_base64] }
