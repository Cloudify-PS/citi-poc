tosca_definitions_version: cloudify_dsl_1_3
imports:
  - https://cloudify.co/spec/cloudify/5.1.2/types.yaml
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-aws-plugin
inputs:
  aws_region:
    type: string
    description: AWS region to launch servers
    required: true
    default: eu-west-2
  availability_zones:
    type: list
    description: AWS ELB availability zones
    required: true
    default: [ eu-west-2c ]
  domain_name:
    type: string
    description: Domain for AWS Route53
    required: true
    default: test1.cloudifydemo.link
  certificate_email:
    type: string
    description: Email used for certificates notifications
    required: true
    default: jakub.cierlik@cloudify.co
  openshift_vpc_id:
    type: string
    description: ID of Openshift cluster VPC
    required: true
    default: vpc-01f23fec9019e8f4c
  subnet_group_name:
    type: string
    description: Name of the subnet group to be created
    required: true
    default: kuba_rds_subnet_group
  hosted_zone_id:
    type: string
    default: Z095567936AFFYEKNEKDY
  default_vpc_id:
    type: string
    default: vpc-6216f60b
  default_subnet_id:
    type: string
    default: subnet-2ec53547
dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key }
    aws_secret_access_key: { get_secret: aws_secret_key }
    region_name: { get_input: aws_region }
node_templates:
  cert_host:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *client_config
      agent_config:
        install_method: remote
        user: ec2-user
        key: { get_attribute: [agent_key, private_key_export] }
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ centos_core_ami, aws_resource_id ] }
        InstanceType: t2.micro
        kwargs:
          BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              DeleteOnTermination: True
          Placement:
            AvailabilityZone: { get_input: [availability_zones, 0] }
          UserData: { get_attribute: [ cloud_init, cloud_config ] }
      use_public_ip: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic
      - type: cloudify.relationships.depends_on
        target: ip
      - type: cloudify.relationships.depends_on
        target: centos_core_ami
      - type: cloudify.relationships.depends_on
        target: cloud_init
  cert_generation:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/certificate.sh
          inputs:
           certificate_email: { get_input: certificate_email }
           domain: { get_input: domain_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: cert_host
      - type: cloudify.relationships.depends_on
        target: dns_record_set
  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: ec2-user
            primary-group: wheel
            shell: /bin/bash
            sudo:
              - 'ALL=(ALL) NOPASSWD:ALL'
            ssh-authorized-keys:
              - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key
  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: cert_key
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true
  ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic
  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          SubnetId: { get_attribute: [ subnet, aws_resource_id] }
          Groups:
            - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnet
      - type: cloudify.relationships.depends_on
        target: security_group
      - type: cloudify.relationships.depends_on
        target: security_group_rules
  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 53333
            ToPort: 53333
            IpRanges:
              - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group
  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *client_config
      resource_config:
        Description: Security group for certificate generation VM
        GroupName: cloudify-security-group
        VpcId: { get_attribute: [ vpc, aws_resource_id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: default_subnet_id }
      resource_config:
        CidrBlock: 'N/A'
        AvailabilityZone: 'N/A'
  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: default_vpc_id }
      resource_config:
        CidrBlock: 'N/A'
  routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: rtb-ff628296
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc
    - type: cloudify.relationships.connected_to
      target: subnet
  centos_core_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Filters:
            - Name: image-id
              Values:
                - ami-0b22fcaf3564fb0c9 
  dns_hosted_zone:
    type: cloudify.nodes.aws.route53.HostedZone
    properties:
      resource_id: { get_input: hosted_zone_id }
      client_config: *client_config
      use_external_resource: true
    relationships:
      - type: cloudify.relationships.aws.route53.hosted_zone.connected_to
        target: vpc
  dns_record_set:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs: {}
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: cert_host
    - type: cloudify.relationships.depends_on
      target: ip
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.route53.resources.record_set.prepare
          inputs:
            resource_config:
              Action: UPSERT
              ResourceRecordSet:
                Name: { get_input: domain_name }
                Type: 'A'
                TTL: !!int 60
                ResourceRecords:
                - Value: { get_attribute: [ip, aws_resource_id] }
â€‹