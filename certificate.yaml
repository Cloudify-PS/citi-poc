tosca_definitions_version: cloudify_dsl_1_3


imports:
  - https://cloudify.co/spec/cloudify/5.1.0/types.yaml
  - plugin:cloudify-aws-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  domain_name:
    type: string
    description: Domain for AWS Route53
    required: true
    default: www.cloudifydemo.link

  hosted_zone_id:
    type: string
    required: true
    default: { get_secret: hosted_zone_id }


dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key }
    aws_secret_access_key: { get_secret: aws_secret_key }
    region_name: eu-west-2  # region of Cloudify Manager

node_templates:

  cloudify_manager:
    type: cloudify.nodes.secrets.Reader
    properties:
      keys:
        - cloudify_manager_config

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_attribute: [cloudify_manager, data, cloudify_manager_config, value, vpc] }
      resource_config:
        CidrBlock: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_manager

  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_attribute: [cloudify_manager, data, cloudify_manager_config, value, subnet] }
      resource_config:
        CidrBlock: 'N/A'
        AvailabilityZone: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_manager

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_attribute: [cloudify_manager, data, cloudify_manager_config, value, igw] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc
      - type: cloudify.relationships.depends_on
        target: cloudify_manager

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *client_config
      resource_config:
        Description: Security group for certificate generation VM
        GroupName: cloudify-security-group
        VpcId: { get_attribute: [ vpc, aws_resource_id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 53333
            ToPort: 53333
            IpRanges:
              - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group

  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          SubnetId: { get_attribute: [ subnet, aws_resource_id] }
          Groups:
            - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnet
      - type: cloudify.relationships.depends_on
        target: security_group
      - type: cloudify.relationships.depends_on
        target: security_group_rules

  ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: cert_key
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_secret: cert_host_user }
            primary-group: wheel
            shell: /bin/bash
            sudo:
              - 'ALL=(ALL) NOPASSWD:ALL'
            ssh-authorized-keys:
              - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  centos_core_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Filters:
          - Name: owner-id
            Values:
            - "057448758665"
          - Name: name
            Values:
            - "CentOS 7.7.1908 x86_64 with cloud-init (HVM)"

  dns_hosted_zone:
    type: cloudify.nodes.aws.route53.HostedZone
    properties:
      resource_id: { get_input: hosted_zone_id }
      client_config: *client_config
      use_external_resource: true
    relationships:
      - type: cloudify.relationships.aws.route53.hosted_zone.connected_to
        target: vpc

  dns_record_set:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Action: UPSERT
          ResourceRecordSet:
            Name: { get_input: domain_name }
            Type: 'A'
            TTL: !!int 60
            ResourceRecords:
            - Value: { get_attribute: [ip, aws_resource_id] }
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: aws.cloudify_aws.route53.resources.record_set.prepare
        stop: {}
        delete: {}
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: ip

  cert_host:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *client_config
      agent_config:
        install_method: remote
        user: { get_secret: cert_host_user }
        key: { get_attribute: [agent_key, private_key_export] }
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ centos_core_ami, aws_resource_id ] }
        InstanceType: t2.micro
        kwargs:
          BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              DeleteOnTermination: True
          Placement:
            AvailabilityZone: { get_attribute: [cloudify_manager, data, cloudify_manager_config, value, availability_zone] }  # Cloudify manager's AZ
          UserData: { get_attribute: [ cloud_init, cloud_config ] }
      use_public_ip: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic
      - type: cloudify.relationships.depends_on
        target: ip
      - type: cloudify.relationships.depends_on
        target: centos_core_ami
      - type: cloudify.relationships.depends_on
        target: cloud_init
      - type: cloudify.relationships.depends_on
        target: dns_record_set

  cert_generation:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/certificate.sh
          inputs:
           domain: { get_input: domain_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: cert_host

  dns_record_remove:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Action: DELETE
          ResourceRecordSet:
            Name: { get_input: domain_name }
            Type: 'A'
            TTL: !!int 60
            ResourceRecords:
            - Value: { get_attribute: [ip, aws_resource_id] }
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: aws.cloudify_aws.route53.resources.record_set.delete
        stop: {}
        delete: {}
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: cert_generation

  kubernetes-certificate-secret-A:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/certificate.yaml
        template_variables:
          NAMESPACE: { get_secret: openshift_namespace }
          CERT: { get_attribute: [ cert_generation, cert_base64 ] }
          KEY: { get_attribute: [ cert_generation, key_base64 ] }

  kubernetes-certificate-secret-B:
    type: cloudify.kubernetes.resources.FileDefinedResource
    properties:
      file:
        resource_path: resources/certificate.yaml
        template_variables:
          NAMESPACE: { get_secret: openshift_namespace }
          CERT: { get_attribute: [ cert_generation, cert_base64 ] }
          KEY: { get_attribute: [ cert_generation, key_base64 ] }
